*************************************
* React Component Styling Using CSS *
*************************************

01. React Component is the technique to create HTML dynamically very simple.    <--- ***


02. HTML visual styling uses CSS. 
    Thus, React component also must use CSS.                                    <--- ***


03. Understanding 
        ① React Project Structure
        ② Component CSS Styling Feature
    from the point of view of CSS in this clause.                               <--- ***


04. Component Styling
    - `React component` is converted into `HTML element` at some time.          <--- ***
      Thus, `Component styling` also must use `CSS`.                            <--- ***

    - React project at large is *NOT* different from Web front development
      that writes HTML code in "index.html" and JavaScript code in "<script>" tag.

      This time, CSS saved into '*.css' file and 
      acts in the form of configuring "href" property of "<link"> tag.


05. Using Bootstrap
    - In React development,
      CSS framework like `Bootstrap` would be used many times in CSS section.   <--- ***

    - React "className" & "htmlFor" properties:                                 <--- ***
      ○ In previous 02-2, The `JSX sentence` is converted
        into `React.createElement` method invocation.                           <--- ***
      ○ In process of conversion, The keywords of JavaScript(or TypeScript)
        ① "class" ② "for" properties cause the confusion.

        Thus, You must use the following keywords provided in React
        instead of these properties like the following:                         
            ① "class"           -> "className"                                  <--- ***
            ② "for"             -> "htmlFor"                                    <--- ***
            ③ "autocomplete"    -> "autoComplete"                               <--- ***

        Example:
            As-Is: <label for="exampleInputEmail1" class="form-label" />
            To-Be: <label htmlFor="exampleInputEmail1" className="form-label" />
    
    - In 02-2, JSX is the sentence that XML's rules + JavaScript.               <--- ***
      ○ XML rule cannot understand the following HTML4 style sentences:
        Example: <input type="password" class="form-control" id="exampleInputPassword1">

      ○ Thus, You must make definitely a JSX sentence with `self-closing tag`.  <--- ***
        Example: <input type="password" class="form-control" id="exampleInputPassword1" `/>`

    - Caution:  [DOM] `Input` elements should have `autocomplete` attributes

        Example:
                <input type="password" 
                        className="form-control"
                        id="exampleInputPassword1"
                        autoComplete="curr-password"                            <--- ***
                        />
      

06. Webpack and CSS File Import
    - In previous, The Bootstrap `*.css` is used
      in way of setting it to the "href" attribute of a <link> tag.
    
      But in 01-5, The `webpack` that used internally in a React project
      makes `*.css` easy to use.

    - The `webpack` makes a React project mixed with images, CSS, 
      JavaScript(or TypeScript) codes, and so on easy to use.

      Especially, the `webpack` makes `*.css` easy to use
      through `import` sentence without <link> tag in TypeScript code.          <--- ***

      That is, The `import` sentences cause the webpack to deploy source files
      including the specified `.css` together existed in the same directory.    <--- ***

        import "./index.css"        // in the `src/index.tsx` file.
        import "./App.css"          // in the `src/App.tsx` file.

        > npm run build
        > npx serve -s build


07. CSS Basic Rules
    - CSS is also a programming language. Thus, it has writing rules.           <--- ***

    - CSS Basic Declaration Sentence Rules:                                     <--- ***

        selector {
            style_property1: value1;
            style_property2: value2;
            ...
        }

        ① The name of `style property` must start with `lowercase` like `color`
        ② The name of `complex` style property must follow `snake case` like `background-color`
        ③ The value of style property is almost single `string` and started `without` single quotation('').
        ④ But the value of style property is `complex`, enclose it with single quotation('') like 'Times New Roman'.
        ⑤ The value of style property is `several`, they are distinguished with (,) on each value.

    - Example:

        p {
            color: red;
            font-size: 14px;
            line-height: 20px;
        }

    - Vendor Prefix:                                                            
      ○ The `property` or `value` started with `hypen(-)`
        like `-apple-system` is called, "vendor prefix".                                <--- ***
      ○ CSS features are made by Web browser provider.
      ○ This is non-standard feature *NOT* existed in the W3C standard.


08. `@import` Rule
    - CSS provides the sentence started with '@', 
      Then this sentence is called, "At Rule".                                  <--- ***

    - `@import` rule in CSS is used to use other CSS file in a CSS file
      instead of `<link rel=stylesheet href/>` tag.                             <--- ***

    - Example: Using `@import` rule, using `Google Material Icon Sets`.

        ① In `src/index.css`
            @import url('https://fonts.googleapis.com/icon?family=Material+Icons');

            .material-icons {
                font-family: 'Material Icons';
                font-weight: bold;
                display: inline-block;
            }

        ② In `src/pages/Icon.tsx`
            ...
            <span className="material-icons">home</span>
            <span className="material-icons">check_circle_outline</span>

        ③ How to know the name of an icon ?
           Please visit - https://fonts.google.com/icons


09. `Inline` Styling Using `style` Property
    - an HTML element can set CSS code to the `style` property
      And when rendering, the CSS code applied like the following:                  <--- ***

      <div style="width: 100px; height: 100px; background-color: blue;" />

    - Thus, React component styling could be done in way of                         <--- ***
        ① class selector
        ② inline styling using 'style' property

    - But In React, the value of 'style' property must be an `object`,
      *NOT* string.                                                                 <--- ***

      Thus, The object sets to the 'style' property called, "Style Object".         <--- ***

      <div style={ { width: 100px; height: 100px; backgroundColor: 'blue'; } } />    <--- ***
 
 
10. Use Icons In Way Of `Node.JS` Package
    - Previously, After brought `Google Material Icon Sets` by `@import at-rule`,
      styled a React component by class selector.

    - The important problem of `@import rule` is that 
      because of getting external CSS files hosted on other website,
      The speed of network could be affected.                                       <--- ***

    - Thus, almost web applications are deployed with embedded CSS framework
      which is implemented in the form of `Node.JS` package.                        <--- ***

    - `Web-safe fonts` and `fontsource`:
      ○ `@import` rule have constraints that it must use web-safe fonts.            <--- ***
      
      ○ Web-safe fonts can apply to all web browsers
        embedded in the desktop, mobile, and so on.                                 <--- ***
        
      ○ Web-safe conts mean that even when *NOT installed in user computer,
        these always shows correctly in web pages.                                  <--- ***
        
      ○ All fonts which Google provides are Web-safe fonts.
        Thus, these fonts can apply @import at-rule.                                <--- ***
        
      ○ `fontsource` (https://fontsource.org/) is the open source Web-safe fonts
        like Google fonts and installed by npm package.                             <--- ***

            > npm search @fontsource
            > npm i @fontsource/snake-case-fontname                                 <--- ***
            > npm view/info/show @fontsource

      ○ Using `fontsource` in TypeScript source:

        Example:

            import '@fontsource/roboto'

            body {
                font-family: 'Roboto', sans-serif;
            }

    - Install `Goole Material Icons` in way of `fontsource`                       <--- ***
      ○ Go to https://fontsource.org/

      ○ Search packages by `material` keyword

      ○ Click Top `Install` menu
        Here, it shows the usage of found fontsource package.

      ○ Example: Material Icons Sharp
      
        (1) Install

            > npm i @fontsource/material-icons-sharp

        (2) Import in TypeScript source (.tsx)

            import '@fontsource/material-icons-sharp';

        (3) in CSS

            body {
                font-family: 'Material Icons Sharp', sans-serif;
            }

    - Implementing Icon, User-defined Component
      ○ In previous, Google Material Icons are used like this:

        <span className="material-icons">home</span>
        <span className="material-icons">check_circle_outline</span>

      ○ Then, The following usage seems like more simple:

            <Icon name="home" />
            <Icon name="check_circle_outline" />

        Also, Applying Inline Styling seems more useful:

            <Icon name="home" style={{ color: 'blue' }} />
            <Icon name="check_circle_outline" style={{ fontSize: '50px', color: 'red' }} />

      ○ So, Let's make Icon, User-defined Component.

        Step1) 
            > mkdir src/components
            > touch index.ts Icon.tsx

        Step2) Write code into `Icon.tsx` file

            import type { FC } from "react"

            export type IconProps = {
                name: string;
                style?: CSSProperties | undefined;                      <---- ***
            }

            // 1st. method - Using `props` directly
            export const Icon1: FC<IconProps> = props => {
                return <span className="material-icons">{props.name}</span>
            }

            // 2nd. method - Using `de-structuring assignment`
            export const Icon2: FC<IconProps> = ({ name, style }) => {
                return <span className="material-icons" style={style}>{name}</span>
            }
      
        Step3) Write code into `index.ts` file

            export * from "./Icon"

        Step4) Write code into `src/pages/UsingIcon.tsx` using `Icon`, user-defined component

            import { Icon1, Icon2 } from "../components"

            export default function UsingIcon() {
                return (
                    <div>
                        <h3>UsingIcon</h3>
                        <Icon1 name="home" style={{ color: 'blue' }} />
                        <Icon2 name="check_circle_outline" style={{ fontSize: '50px', color: 'red' }} />
                    </div>
                )
            }


11. User-defined Component with CSS styling In Way Of The Most React-like method.
    - React framework provides two types 
      which could at once append all properties of an HTML element:                     <--- ***

        (1) DetailedHTMLProps
        (2) HTMLAttributes

      These two types must be used together.                                            <--- ***

    - Example: `<span />` React Component's type is the following:

        span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;

    - Set operator in TypeScript:                                                       <--- ***

      ○ In functional language, The following Set operators are provided. 
        (1) Symbol, '|'     => Union operator applied to Types in TypeScript.           <--- ***
        (2) Symbol, '&'     => Intersection operator applied to Types in TypeScript.    <--- ***

      ○ Example: If there are A, B two types,
        ---------------------------------------
        A | B   => means that A or B Type                                               <--- ***
        ---------------------------------------
        ex) name: string | undefined    => name is string OR undefined type.

        ---------------------------------------
        A & B   => means that A and also B Type                                         <--- ***
        ---------------------------------------
        ex) type ReactSpanProps = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>
            export type IconProps = ReactSpanProps & { name: string; }

            => This `IconProps` type is not only `ReactSpanProps` type, 
                but also `{ name: string; }` type at the same time.

            => Thus, The following code is possible:

                export const Icon: FC<IconProps> = ({name, ...props}) => {...}

                Here, `name`  is from `{ name: string; }` type and
                      `props` is from `ReactSpanProps` type.

    - How to change the name of a parameter ?                                           <--- ***

      ○ In TypeScript, Name of a parameter could be changed in way of
        appending `: new_parameter_name` to after the parameter to be renamed:          <--- ***

        Example:
          export const Icon: FC<IconProps> = ({ name, className: _className, ...props}) => {}
          
          Here, `_className` is a new name of the `className` parameter.                <--- ***

      ○ Once new parameter name assigned using `:new_parameter_name` syntax,
        Then old parameter name could *NOT* be used, 
        Only `new_parameter_name` can be used.                                          <--- ***


12. In React, All properties of a React element are the following:                      <--- ***

    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {
        // ----------------------------------------
        // 1. React-specific Attributes
        // ----------------------------------------
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;

        // ----------------------------------------
        // 2. Standard HTML Attributes
        // ----------------------------------------
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: Booleanish | "inherit" | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: Booleanish | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: Booleanish | undefined;
        style?: CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;

        // ----------------------------------------
        // 3. Unknown
        // ----------------------------------------
        radioGroup?: string | undefined; // <command>, <menuitem>

        // ----------------------------------------
        // 4. WAI-ARIA
        // ----------------------------------------
        role?: AriaRole | undefined;

        // ----------------------------------------
        // 5. RDFa Attributes
        // ----------------------------------------
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;

        // ----------------------------------------
        // 6. Non-standard Attributes
        // ----------------------------------------
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;

        // ----------------------------------------
        // 7. Living Standard
        // ----------------------------------------
        /**
         * Hints at the type of data that might be entered by the user while editing the element or its contents
         * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute
         */
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;

        /**
         * Specify that a standard HTML element should behave like a defined custom built-in element
         * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is
         */
        is?: string | undefined;
    }


    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/
    interface AriaAttributes {
        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
        "aria-activedescendant"?: string | undefined;
        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
        "aria-atomic"?: Booleanish | undefined;
        /**
         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
         * presented if they are made.
         */
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
        /**
         * Defines a string value that labels the current element, which is intended to be converted into Braille.
         * @see aria-label.
         */
        "aria-braillelabel"?: string | undefined;
        /**
         * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.
         * @see aria-roledescription.
         */
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: Booleanish | undefined;
        /**
         * Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
         * @see aria-pressed @see aria-selected.
         */
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
        /**
         * Defines the total number of columns in a table, grid, or treegrid.
         * @see aria-colindex.
         */
        "aria-colcount"?: number | undefined;
        /**
         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
         * @see aria-colcount @see aria-colspan.
         */
        "aria-colindex"?: number | undefined;
        /**
         * Defines a human readable text alternative of aria-colindex.
         * @see aria-rowindextext.
         */
        "aria-colindextext"?: string | undefined;
        /**
         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
         * @see aria-colindex @see aria-rowspan.
         */
        "aria-colspan"?: number | undefined;
        /**
         * Identifies the element (or elements) whose contents or presence are controlled by the current element.
         * @see aria-owns.
         */
        "aria-controls"?: string | undefined;
        /** Indicates the element that represents the current item within a container or set of related elements. */
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
        /**
         * Identifies the element (or elements) that describes the object.
         * @see aria-labelledby
         */
        "aria-describedby"?: string | undefined;
        /**
         * Defines a string value that describes or annotates the current element.
         * @see related aria-describedby.
         */
        "aria-description"?: string | undefined;
        /**
         * Identifies the element that provides a detailed, extended description for the object.
         * @see aria-describedby.
         */
        "aria-details"?: string | undefined;
        /**
         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
         * @see aria-hidden @see aria-readonly.
         */
        "aria-disabled"?: Booleanish | undefined;
        /**
         * Indicates what functions can be performed when a dragged object is released on the drop target.
         * @deprecated in ARIA 1.1
         */
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
        /**
         * Identifies the element that provides an error message for the object.
         * @see aria-invalid @see aria-describedby.
         */
        "aria-errormessage"?: string | undefined;
        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
        "aria-expanded"?: Booleanish | undefined;
        /**
         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
         * allows assistive technology to override the general default of reading in document source order.
         */
        "aria-flowto"?: string | undefined;
        /**
         * Indicates an element's "grabbed" state in a drag-and-drop operation.
         * @deprecated in ARIA 1.1
         */
        "aria-grabbed"?: Booleanish | undefined;
        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
        /**
         * Indicates whether the element is exposed to an accessibility API.
         * @see aria-disabled.
         */
        "aria-hidden"?: Booleanish | undefined;
        /**
         * Indicates the entered value does not conform to the format expected by the application.
         * @see aria-errormessage.
         */
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
        "aria-keyshortcuts"?: string | undefined;
        /**
         * Defines a string value that labels the current element.
         * @see aria-labelledby.
         */
        "aria-label"?: string | undefined;
        /**
         * Identifies the element (or elements) that labels the current element.
         * @see aria-describedby.
         */
        "aria-labelledby"?: string | undefined;
        /** Defines the hierarchical level of an element within a structure. */
        "aria-level"?: number | undefined;
        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        /** Indicates whether an element is modal when displayed. */
        "aria-modal"?: Booleanish | undefined;
        /** Indicates whether a text box accepts multiple lines of input or only a single line. */
        "aria-multiline"?: Booleanish | undefined;
        /** Indicates that the user may select more than one item from the current selectable descendants. */
        "aria-multiselectable"?: Booleanish | undefined;
        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        /**
         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
         * @see aria-controls.
         */
        "aria-owns"?: string | undefined;
        /**
         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
         * A hint could be a sample value or a brief description of the expected format.
         */
        "aria-placeholder"?: string | undefined;
        /**
         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
         * @see aria-setsize.
         */
        "aria-posinset"?: number | undefined;
        /**
         * Indicates the current "pressed" state of toggle buttons.
         * @see aria-checked @see aria-selected.
         */
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
        /**
         * Indicates that the element is not editable, but is otherwise operable.
         * @see aria-disabled.
         */
        "aria-readonly"?: Booleanish | undefined;
        /**
         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
         * @see aria-atomic.
         */
        "aria-relevant"?:
            | "additions"
            | "additions removals"
            | "additions text"
            | "all"
            | "removals"
            | "removals additions"
            | "removals text"
            | "text"
            | "text additions"
            | "text removals"
            | undefined;
        /** Indicates that user input is required on the element before a form may be submitted. */
        "aria-required"?: Booleanish | undefined;
        /** Defines a human-readable, author-localized description for the role of an element. */
        "aria-roledescription"?: string | undefined;
        /**
         * Defines the total number of rows in a table, grid, or treegrid.
         * @see aria-rowindex.
         */
        "aria-rowcount"?: number | undefined;
        /**
         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
         * @see aria-rowcount @see aria-rowspan.
         */
        "aria-rowindex"?: number | undefined;
        /**
         * Defines a human readable text alternative of aria-rowindex.
         * @see aria-colindextext.
         */
        "aria-rowindextext"?: string | undefined;
        /**
         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
         * @see aria-rowindex @see aria-colspan.
         */
        "aria-rowspan"?: number | undefined;
        /**
         * Indicates the current "selected" state of various widgets.
         * @see aria-checked @see aria-pressed.
         */
        "aria-selected"?: Booleanish | undefined;
        /**
         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
         * @see aria-posinset.
         */
        "aria-setsize"?: number | undefined;
        /** Indicates if items in a table or grid are sorted in ascending or descending order. */
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        /** Defines the maximum allowed value for a range widget. */
        "aria-valuemax"?: number | undefined;
        /** Defines the minimum allowed value for a range widget. */
        "aria-valuemin"?: number | undefined;
        /**
         * Defines the current value for a range widget.
         * @see aria-valuetext.
         */
        "aria-valuenow"?: number | undefined;
        /** Defines the human readable text alternative of aria-valuenow for a range widget. */
        "aria-valuetext"?: string | undefined;
    }
    
    interface DOMAttributes<T> {
        children?: ReactNode | undefined;
        dangerouslySetInnerHTML?: {
            // Should be InnerHTML['innerHTML'].
            // But unfortunately we're mixing renderer-specific type declarations.
            __html: string | TrustedHTML;
        } | undefined;

        // ----------------------------------------
        // 1. Clipboard Events
        // ----------------------------------------
        onCopy?: ClipboardEventHandler<T> | undefined;
        onCopyCapture?: ClipboardEventHandler<T> | undefined;
        onCut?: ClipboardEventHandler<T> | undefined;
        onCutCapture?: ClipboardEventHandler<T> | undefined;
        onPaste?: ClipboardEventHandler<T> | undefined;
        onPasteCapture?: ClipboardEventHandler<T> | undefined;

        // ----------------------------------------
        // 2. Composition Events
        // ----------------------------------------
        onCompositionEnd?: CompositionEventHandler<T> | undefined;
        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;
        onCompositionStart?: CompositionEventHandler<T> | undefined;
        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;
        onCompositionUpdate?: CompositionEventHandler<T> | undefined;
        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;

        // ----------------------------------------
        // 3. Focus Events
        // ----------------------------------------
        onFocus?: FocusEventHandler<T> | undefined;
        onFocusCapture?: FocusEventHandler<T> | undefined;
        onBlur?: FocusEventHandler<T> | undefined;
        onBlurCapture?: FocusEventHandler<T> | undefined;

        // ----------------------------------------
        // 4. Form Events
        // ----------------------------------------
        onChange?: FormEventHandler<T> | undefined;
        onChangeCapture?: FormEventHandler<T> | undefined;
        onBeforeInput?: FormEventHandler<T> | undefined;
        onBeforeInputCapture?: FormEventHandler<T> | undefined;
        onInput?: FormEventHandler<T> | undefined;
        onInputCapture?: FormEventHandler<T> | undefined;
        onReset?: FormEventHandler<T> | undefined;
        onResetCapture?: FormEventHandler<T> | undefined;
        onSubmit?: FormEventHandler<T> | undefined;
        onSubmitCapture?: FormEventHandler<T> | undefined;
        onInvalid?: FormEventHandler<T> | undefined;
        onInvalidCapture?: FormEventHandler<T> | undefined;

        // ----------------------------------------
        // 5. Image Events
        // ----------------------------------------
        onLoad?: ReactEventHandler<T> | undefined;
        onLoadCapture?: ReactEventHandler<T> | undefined;
        onError?: ReactEventHandler<T> | undefined; // also a Media Event
        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event

        // ----------------------------------------
        // 6. Keyboard Events
        // ----------------------------------------
        onKeyDown?: KeyboardEventHandler<T> | undefined;
        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;
        /** @deprecated */
        onKeyPress?: KeyboardEventHandler<T> | undefined;
        /** @deprecated */
        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;
        onKeyUp?: KeyboardEventHandler<T> | undefined;
        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;

        // ----------------------------------------
        // 7. Media Events
        // ----------------------------------------
        onAbort?: ReactEventHandler<T> | undefined;
        onAbortCapture?: ReactEventHandler<T> | undefined;
        onCanPlay?: ReactEventHandler<T> | undefined;
        onCanPlayCapture?: ReactEventHandler<T> | undefined;
        onCanPlayThrough?: ReactEventHandler<T> | undefined;
        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;
        onDurationChange?: ReactEventHandler<T> | undefined;
        onDurationChangeCapture?: ReactEventHandler<T> | undefined;
        onEmptied?: ReactEventHandler<T> | undefined;
        onEmptiedCapture?: ReactEventHandler<T> | undefined;
        onEncrypted?: ReactEventHandler<T> | undefined;
        onEncryptedCapture?: ReactEventHandler<T> | undefined;
        onEnded?: ReactEventHandler<T> | undefined;
        onEndedCapture?: ReactEventHandler<T> | undefined;
        onLoadedData?: ReactEventHandler<T> | undefined;
        onLoadedDataCapture?: ReactEventHandler<T> | undefined;
        onLoadedMetadata?: ReactEventHandler<T> | undefined;
        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;
        onLoadStart?: ReactEventHandler<T> | undefined;
        onLoadStartCapture?: ReactEventHandler<T> | undefined;
        onPause?: ReactEventHandler<T> | undefined;
        onPauseCapture?: ReactEventHandler<T> | undefined;
        onPlay?: ReactEventHandler<T> | undefined;
        onPlayCapture?: ReactEventHandler<T> | undefined;
        onPlaying?: ReactEventHandler<T> | undefined;
        onPlayingCapture?: ReactEventHandler<T> | undefined;
        onProgress?: ReactEventHandler<T> | undefined;
        onProgressCapture?: ReactEventHandler<T> | undefined;
        onRateChange?: ReactEventHandler<T> | undefined;
        onRateChangeCapture?: ReactEventHandler<T> | undefined;
        onResize?: ReactEventHandler<T> | undefined;
        onResizeCapture?: ReactEventHandler<T> | undefined;
        onSeeked?: ReactEventHandler<T> | undefined;
        onSeekedCapture?: ReactEventHandler<T> | undefined;
        onSeeking?: ReactEventHandler<T> | undefined;
        onSeekingCapture?: ReactEventHandler<T> | undefined;
        onStalled?: ReactEventHandler<T> | undefined;
        onStalledCapture?: ReactEventHandler<T> | undefined;
        onSuspend?: ReactEventHandler<T> | undefined;
        onSuspendCapture?: ReactEventHandler<T> | undefined;
        onTimeUpdate?: ReactEventHandler<T> | undefined;
        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;
        onVolumeChange?: ReactEventHandler<T> | undefined;
        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;
        onWaiting?: ReactEventHandler<T> | undefined;
        onWaitingCapture?: ReactEventHandler<T> | undefined;

        // ----------------------------------------
        // 8. MouseEvents
        // ----------------------------------------
        onAuxClick?: MouseEventHandler<T> | undefined;
        onAuxClickCapture?: MouseEventHandler<T> | undefined;
        onClick?: MouseEventHandler<T> | undefined;
        onClickCapture?: MouseEventHandler<T> | undefined;
        onContextMenu?: MouseEventHandler<T> | undefined;
        onContextMenuCapture?: MouseEventHandler<T> | undefined;
        onDoubleClick?: MouseEventHandler<T> | undefined;
        onDoubleClickCapture?: MouseEventHandler<T> | undefined;
        onDrag?: DragEventHandler<T> | undefined;
        onDragCapture?: DragEventHandler<T> | undefined;
        onDragEnd?: DragEventHandler<T> | undefined;
        onDragEndCapture?: DragEventHandler<T> | undefined;
        onDragEnter?: DragEventHandler<T> | undefined;
        onDragEnterCapture?: DragEventHandler<T> | undefined;
        onDragExit?: DragEventHandler<T> | undefined;
        onDragExitCapture?: DragEventHandler<T> | undefined;
        onDragLeave?: DragEventHandler<T> | undefined;
        onDragLeaveCapture?: DragEventHandler<T> | undefined;
        onDragOver?: DragEventHandler<T> | undefined;
        onDragOverCapture?: DragEventHandler<T> | undefined;
        onDragStart?: DragEventHandler<T> | undefined;
        onDragStartCapture?: DragEventHandler<T> | undefined;
        onDrop?: DragEventHandler<T> | undefined;
        onDropCapture?: DragEventHandler<T> | undefined;
        onMouseDown?: MouseEventHandler<T> | undefined;
        onMouseDownCapture?: MouseEventHandler<T> | undefined;
        onMouseEnter?: MouseEventHandler<T> | undefined;
        onMouseLeave?: MouseEventHandler<T> | undefined;
        onMouseMove?: MouseEventHandler<T> | undefined;
        onMouseMoveCapture?: MouseEventHandler<T> | undefined;
        onMouseOut?: MouseEventHandler<T> | undefined;
        onMouseOutCapture?: MouseEventHandler<T> | undefined;
        onMouseOver?: MouseEventHandler<T> | undefined;
        onMouseOverCapture?: MouseEventHandler<T> | undefined;
        onMouseUp?: MouseEventHandler<T> | undefined;
        onMouseUpCapture?: MouseEventHandler<T> | undefined;

        // ----------------------------------------
        // 9. Selection Events
        // ----------------------------------------
        onSelect?: ReactEventHandler<T> | undefined;
        onSelectCapture?: ReactEventHandler<T> | undefined;

        // ----------------------------------------
        // 10. Touch Events
        // ----------------------------------------
        onTouchCancel?: TouchEventHandler<T> | undefined;
        onTouchCancelCapture?: TouchEventHandler<T> | undefined;
        onTouchEnd?: TouchEventHandler<T> | undefined;
        onTouchEndCapture?: TouchEventHandler<T> | undefined;
        onTouchMove?: TouchEventHandler<T> | undefined;
        onTouchMoveCapture?: TouchEventHandler<T> | undefined;
        onTouchStart?: TouchEventHandler<T> | undefined;
        onTouchStartCapture?: TouchEventHandler<T> | undefined;

        // ----------------------------------------
        // 11. Pointer Events
        // ----------------------------------------
        onPointerDown?: PointerEventHandler<T> | undefined;
        onPointerDownCapture?: PointerEventHandler<T> | undefined;
        onPointerMove?: PointerEventHandler<T> | undefined;
        onPointerMoveCapture?: PointerEventHandler<T> | undefined;
        onPointerUp?: PointerEventHandler<T> | undefined;
        onPointerUpCapture?: PointerEventHandler<T> | undefined;
        onPointerCancel?: PointerEventHandler<T> | undefined;
        onPointerCancelCapture?: PointerEventHandler<T> | undefined;
        onPointerEnter?: PointerEventHandler<T> | undefined;
        onPointerEnterCapture?: PointerEventHandler<T> | undefined;
        onPointerLeave?: PointerEventHandler<T> | undefined;
        onPointerLeaveCapture?: PointerEventHandler<T> | undefined;
        onPointerOver?: PointerEventHandler<T> | undefined;
        onPointerOverCapture?: PointerEventHandler<T> | undefined;
        onPointerOut?: PointerEventHandler<T> | undefined;
        onPointerOutCapture?: PointerEventHandler<T> | undefined;
        onGotPointerCapture?: PointerEventHandler<T> | undefined;
        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;
        onLostPointerCapture?: PointerEventHandler<T> | undefined;
        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;

        // ----------------------------------------
        // 12. UI Events
        // ----------------------------------------
        onScroll?: UIEventHandler<T> | undefined;
        onScrollCapture?: UIEventHandler<T> | undefined;

        // ----------------------------------------
        // 13. Wheel Events
        // ----------------------------------------
        onWheel?: WheelEventHandler<T> | undefined;
        onWheelCapture?: WheelEventHandler<T> | undefined;

        // ----------------------------------------
        // 14. Animation Events
        // ----------------------------------------
        onAnimationStart?: AnimationEventHandler<T> | undefined;
        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;
        onAnimationEnd?: AnimationEventHandler<T> | undefined;
        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;
        onAnimationIteration?: AnimationEventHandler<T> | undefined;
        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;

        // ----------------------------------------
        // 15. Transition Events
        // ----------------------------------------
        onTransitionEnd?: TransitionEventHandler<T> | undefined;
        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;
    }


