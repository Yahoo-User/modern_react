*******************************************************
* 02. Understanding Built-in React Hooks		      *
*******************************************************

○ Hooks let you use different React features from your components.
  Hook을 사용하면 컴포넌트의 다양한 React 기능을 사용할 수 있습니다.

○ You can either use the built-in Hooks or combine them to build your own.
  내장된 Hook을 사용하거나 결합하여 직접 만들 수 있습니다.

○ React hooks could be divided into the following by features:

	(1) State Hooks
	  - State lets a component “remember” information like user input.
	  - For example, a form component can use state to store the input value, 
	  	while an image gallery component can use state to store the selected image index.

	  - To add state to a component, use one of these Hooks:
			① "useState" 	declares a state variable that you can update directly.
			② "useReducer" 	declares a state variable with the update logic inside a "reducer" function.

		-----------------------------------------------------------------------------------

	  - State 를 사용하면 컴포넌트가 사용자 입력과 같은 정보를 "기억(remember)" 할 수 있습니다.
	  - 예를들어, 양식 컴포넌트는 "state" 를 사용하여, 입력값을 저장할 수 있는 반면,
				  이미지 갤러리 컴포넌트는 "state" 를 사용하여, 선택한 이미지 인덱스를 저장할 수 있습니다.

	  - 컴포넌트에 상태를 추가하려면, 다음 Hook 중 하나를 사용하십시오:
			① "useState" 	직접 업데이트 할 수 있는 상태 변수를 선언합니다.
			② "useReducer" 	"reducer" 함수 내에서 업데이트 로직을 사용하여, 상태 변수를 선언합니다.

		-----------------------------------------------------------------------------------

	  - Example:

			function ImageGallery() {
				const [index, setIndex] = useState(0);

				// ...


	(2) Context Hooks
	  - "context" lets a component receive information from distant parents without passing it as "props".
	  - For example, your app’s top-level component can pass the current UI theme to all components below, 
	    no matter how deep:
			① "useContext" reads and subscribes to a context

		-----------------------------------------------------------------------------------

	  - "context"를 사용하면, 컴포넌트가 "props"로 전달하지 않고, 멀리 있는 부모로부터 정보를 받을 수 있습니다.
	  - 예를들어, 앱의 최상위 컴포넌트는, 현재 UI 테마를, 깊이에 관계없이, 하위의 모든 컴포넌트에 전달할 수 있습니다:
			① "useContext"는 "context"를 읽고 구독합니다

		-----------------------------------------------------------------------------------
		
	  - Exampe:

			function Button() {
				const theme = useContext(ThemeContext);

				// ...


	(3) Ref Hooks
	  - "Refs" let a component hold some information that isn’t used for rendering,
	  	like a DOM node or a timeout ID.
	  - Unlike with state, updating a "ref" does not re-render your component.
	  - Refs are an “escape hatch” from the React paradigm.

	  - They are useful when you need to work with non-React systems, such as the built-in browser APIs.
			① "useRef" declares a "ref".
				You can hold any value in it, but most often it’s used to hold a DOM node.

			② "useImperativeHandle" lets you customize the "ref" exposed by your component.
				This is rarely used.

		-----------------------------------------------------------------------------------

	  - "Refs"를 사용하면 컴포넌트가, DOM 노드나 timeout ID와 같이, 
		렌더링에 사용되지 않는 일부 정보를 보유할 수 있습니다.
	  - "state" 와 달리, "ref"를 업데이트 해도, 컴포넌트가 다시 렌더링되지 않습니다.
	  - "Refs"는, React 패러다임의 "탈출구"입니다.

	  - 내장된 브라우저 API와 같이, React가 아닌 시스템으로 작업해야 할 때, 유용합니다.
			① "useRef"는 "ref"를 선언합니다.
				여기에는 어떤 값이라도 담을 수 있지만, 대부분 DOM 노드를 담는 데 사용됩니다.

			② "useImperativeHandle"을 사용하면,
				컴포넌트에 의해 노출된 "ref"를 커스터마이징 할 수 있습니다.
				하지만 이것은 거의 사용되지 않습니다.

		-----------------------------------------------------------------------------------

	  - Example:

			function Form() {
				const inputRef = useRef(null);

				// ...


	(4) Effect Hooks
	  - Effects let a component connect to and synchronize with external systems.
	  - This includes dealing with network, browser DOM, animations, 
	    widgets written using a different UI library, and other non-React code.
		--------------------------------
	  - "Effect"를 사용하면, 컴포넌트를 외부 시스템에 연결하고 동기화할 수 있습니다.
	  - 여기에는 네트워크, 브라우저 DOM, 애니메이션, 
	  	다른 UI 라이브러리를 사용하여 작성된 위젯 및 기타 비 React 코드 처리가 포함됩니다.

		① "useEffect" connects a component to an external system.
		--------------------------------
		① "useEffect"는 컴포넌트를 외부 시스템에 연결합니다.

			function ChatRoom({ roomId }) {
				useEffect(() => {
					const connection = createConnection(roomId);
					connection.connect();

					return () => connection.disconnect();
				}, [roomId]);

				// ...

	  - Effects are an “escape hatch” from the React paradigm. 
	  - Don’t use Effects to orchestrate the data flow of your application.
	  - If you’re not interacting with an external system, you might not need an Effect.
		--------------------------------
	  - "Effect"는 React 패러다임의 "탈출구"입니다.
	  - 응용 프로그램의 데이터 흐름을 오케스트레이션하는데, "Effect"를 사용하지 마세요. 
	  - 외부 시스템과 상호작용하지 않는 경우, "Effect"가 필요하지 않을 수 있습니다.

	  - There are two rarely used variations of "useEffect" with differences in timing:
		--------------------------------
	  - 타이밍의 차이로 거의 사용되지 않는 "useEffect"의 두가지 변형이 있습니다:

		② "useLayoutEffect" fires before the browser repaints the screen.
			You can measure layout here.
		③ "useInsertionEffect" fires before React makes changes to the DOM.
			Libraries can insert dynamic CSS here.
		--------------------------------
		② "useLayoutEffect"는, 브라우저가 화면을 다시 그리기 전에 실행됩니다.
			여기에서 레이아웃을 측정할 수 있습니다.
		③ "useInsertionEffect"는, React가 DOM을 변경하기 전에 실행됩니다.
			라이브러리는 여기에 동적 CSS를 삽입할 수 있습니다.


	(5) Performance hooks
	  - A common way to optimize re-rendering performance is to skip unnecessary work.
	  - For example, you can tell React to reuse a cached calculation or to skip a re-render
	    if the data has not changed since the previous render.
		--------------------------------
	  - "re-rendering" 성능을 최적화하는 일반적인 방법은, 불필요한 작업을 건너뛰는 것입니다.
	  - 예를들어, 캐시된 계산을 재사용하거나, 이전 렌더링 이후 데이터가 변경되지 않은 경우,
	    "re-rendering"을 건너뛰도록 React에 지시할 수 있습니다.

	  - To skip calculations and unnecessary re-rendering, use one of these Hooks:
		--------------------------------
	  - 계산과 불필요한 "re-rendering"을 건너뛰려면, 다음 Hook 중 하나를 사용하십시오:

		① "useMemo" lets you cache the result of an expensive calculation.
		② "useCallback" lets you cache a function definition before passing it down to an optimized component.
		--------------------------------
		① "useMemo" 를 사용하면, 비용이 많이 드는 계산 결과를 캐시할 수 있습니다.
		② "useCallback" 을 사용하면, 함수정의를, 최적화된 컴포넌트로 전달하기 전에, 캐시할 수 있습니다.

	  - Sometimes, you can’t skip re-rendering because the screen actually needs to update.
	  - In that case, you can improve performance by separating blocking updates 
	    that must be synchronous (like typing into an input) from non-blocking updates 
		which don’t need to block the user interface (like updating a chart).
		--------------------------------
	  - 때로는, 화면이 실제로 업데이트 되어야 하기 때문에, "re-rendering" 을 건너뛸 수 없습니다.
	  - 이 경우, 동기적이어야 하는 차단 업데이트(예: 입력)를,
	    사용자 인터페이스를 차단할 필요가 없는 비차단 업데이트(예: 차트 업데이트)와 분리하여,
		성능을 향상시킬 수 있습니다.

	  - To prioritize rendering, use one of these Hooks:
		--------------------------------
	  - 렌더링의 우선순위를 지정하려면, 다음 Hook 중, 하나를 사용하십시오:

		③ "useTransition" lets you mark a state transition as non-blocking and allow other updates to interrupt it.
		④ "useDeferredValue" lets you defer updating a non-critical part of the UI and let other parts update first.
		--------------------------------
		③ "useTransition"을 사용하면, 상태전환(state transition)을 비차단(non-blocking)으로 표시하고,
			다른 업데이트가 이를 중단하도록 허용할 수 있습니다.
		④ "useDeferredValue"를 사용하면, UI의 중요하지 않은 부분의 업데이트를 연기하고,
			다른 부분이 먼저 업데이트 되도록 할 수 있습니다.

	  - Example:

			function TodoList({ todos, tab, theme }) {
				const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);
				
				// ...
			}


	(6) Resource Hooks
	  - Resources can be accessed by a component without having them as part of their state.
	  - For example, a component can read a message from a Promise or read styling information from a context.

	  - To read a value from a resource, use this Hook:
		① "use" lets you read the value of a resource like a Promise or context.

		-----------------------------------------------------------------------------------

	  - 리소스는 컴포넌트에서 액세스할 수 있으며, 상태의 일부로 사용할 수 없습니다.
	  - 예를들어, 컴포넌트는 Promise에서 메시지를 읽거나 컨텍스트에서 스타일 정보를 읽을 수 있습니다.

	  - 리소스에서 값을 읽으려면, 다음 Hook을 사용하십시오.
		① "use" 를 사용하면, Promise 또는 컨텍스트와 같은, 리소스의 값을 읽을 수 있습니다.

		-----------------------------------------------------------------------------------

	  - Example:

	  		function MessageComponent({ messagePromise }) {
				const message = use(messagePromise);
				const theme = use(ThemeContext);

				// ...
			}


	(7) Other Hooks
	  - These Hooks are mostly useful to library authors and aren’t commonly used in the application code.

		① "useDebugValue" lets you customize the label React DevTools displays for your custom Hook.
		② "useId" lets a component associate a unique ID with itself.
			Typically used with accessibility APIs.
		③ "useSyncExternalStore" lets a component subscribe to an external store.

		-----------------------------------------------------------------------------------

	  - 이러한 Hook은 라이브러리 작성자에게 주로 유용하며, 애플리케이션 코드에서는 일반적으로 사용되지 않습니다.

		① "useDebugValue" 를 사용하면, React DevTools가 Custom Hook에 표시하는 레이블을 커스터마이징 할 수 있습니다.
		② "useId" 를 사용하면, 컴포넌트가 고유ID를 자신과 연결할 수 있습니다.
			일반적으로 접근성 API와 함께 사용됩니다.
		③ "useSyncExternalStore" 를 사용하면, 컴포넌트가 외부 저장소를 구독할 수 있습니다.


